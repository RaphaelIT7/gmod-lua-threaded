name: Build Project

on:
  workflow_dispatch:
    inputs:
      ARTIFACT_EXPIRE:
        type: string
        required: false
        default: "1"
        description: "How long the Artifacts are available. 30 days by default so you don't end up like me hitting the spending limit after 4 days (Got too many artifacts)."
      PDB_ARTIFACT_EXPIRE:
        type: string
        required: false
        default: "1"
        description: "How long the Artifacts for .pdb files are available. 1 days by default."
      PROJECT_NAME:
        type: string
        required: true
        default: "lua_threaded"
        description: "The Project to compile. This should be the same value as you set in the premake5.lua"
      PROJECT_PATH:
        type: string
        required: false
        default: ""
        description: "The Path to the project"
      USE_PREFIX:
        type: string
        required: false
        default: "true"
        description: "If enabled, it will use the gm[realm]_[Project]_[platform].[extension] format. Else, it will just use [Project].[extension] name."
      BUILD_64x:
        type: string
        required: false
        default: "false"
        description: "If enabled, the Project is also compiled for the 64x"
      BUILD_32x:
        type: string
        required: false
        default: "true"
        description: "If enabled, the Project is also compiled for the 32x"
      BUILD_WINDOWS:
        type: string
        required: false
        default: "false"
        description: "If enabled, the Project is compiled for Windows"
      BUILD_LINUX:
        type: string
        required: false
        default: "true"
        description: "If enabled, the Project is compiled for Linux"
      REALM:
        type: string
        required: false
        default: "sv"
        description: "The Realm this module is compiled for."
      LINUX_FILEEXTENTION:
        type: string
        required: false
        default: "dll"
        description: "The File extension for Linux compiles. Used in cases where you compile a .so file."
      WINDOWS_FILEEXTENTION:
        type: string
        required: false
        default: "dll"
        description: "The File extension for Windows compiles."
      UPLOAD:
        type: string
        required: false
        default: "pterodactyl"
        description: "How the result should be uploaded. Can be sftp, artifact or pterodactyl. Only works for Linux."
      UPLOAD_PATH:
        type: string
        required: false
        default: "garrysmod/lua/bin/"
        description: "If UPLOAD is set to SFTP, it will upload the result in the given directory."
      UPLOAD_PDB:
        type: string
        required: false
        default: "false"
        description: "If enabled, the .pdb file will also be uploaded."
      SFTP_IP:
        type: string
        required: false
        default: ""
        description: "The IP of the SFTP server."
      SFTP_USER:
        type: string
        required: false
        default: ""
        description: "The user for the SFTP server."
      SFTP_PASSWORD:
        type: string
        required: false
        default: ""
        description: "The password to use for the SFTP server."
      SFTP_PRIVATE_KEY:
        type: string
        required: false
        description: "The Private Key to use for the SFTP server. Leave this empty to use a password."
      # All variables below are secrets, so pass them along as secrets. I should probably do this for other vars as well.
      #PTERODACTYL_URL:
      #  type: string
      #  required: false
      #  description: "The URL to the Pterodactyl site"
      #PTERODACTYL_SERVER:
      #  type: string
      #  required: false
      #  description: "The Server ID to upload the file"
      #PTERODACTYL_KEY:
      #  type: string
      #  required: false
      #  description: "The API Key to use for Pterodactyl"
      PTERODACTYL_PATH:
        type: string
        required: false
        default: "garrysmod%2Flua%2Fbin%2f"
        description: "The Path to upload the file into. Repace / with %2F"
      GARRYSMOD_COOMON:
        type: string
        required: false
        default: "danielga/garrysmod_common"
        description: "The garrysmod_common repository to use. Useful if you have a custom one you want to use."
      GARRYSMOD_COOMON_BRANCH:
        type: string
        required: false
        default: "master"
        description: "The garrysmod_common branch to use."
      GARRYSMOD_COOMON_64XBRANCH:
        type: string
        required: false
        default: "x86-64-support-sourcesdk"
        description: "The garrysmod_common branch to use for the 64x compiles."
      SOURCESDK_MINIMAL:
        type: string
        required: false
        default: "danielga/sourcesdk-minimal"
        description: "The sourcesdk-minimal repository to use. Useful if you have a custom one you want to use."
      SOURCESDK_MINIMAL_BRANCH:
        type: string
        required: false
        default: "master"
        description: "The sourcesdk-minimal branch to use."
      SOURCESDK_MINIMAL_64XBRANCH:
        type: string
        required: false
        default: "x86-64-branch"
        description: "The sourcesdk-minimal branch to use for the 64x compiles."
      SCANNING:
        type: string
        required: false
        default: "danielga/scanning"
        description: "The scanning repository to use."
      SCANNING_BRANCH:
        type: string
        required: false
        default: "master"
        description: "The scanning branch to use."
      DETOURING:
        type: string
        required: false
        default: "danielga/detouring"
        description: "The detouring repository to use."
      DETOURING_BRANCH:
        type: string
        required: false
        default: "master"
        description: "The detouring branch to use."
  push:
    paths:
      - 'source/**'
      - 'premake5.lua'

env:
  PROJECT_NAME_LINUX32: ${{ format('{0}{1}{2}{3}{4}', inputs.USE_PREFIX == 'true' && 'gm' || '', inputs.USE_PREFIX == 'true' && inputs.REALM || '', inputs.USE_PREFIX == 'true' && '_' || '', inputs.PROJECT_NAME, inputs.USE_PREFIX == 'true' && '_linux' || '') }}
  PROJECT_NAME_LINUX64: ${{ format('{0}{1}{2}{3}{4}', inputs.USE_PREFIX == 'true' && 'gm' || '', inputs.USE_PREFIX == 'true' && inputs.REALM || '', inputs.USE_PREFIX == 'true' && '_' || '', inputs.PROJECT_NAME, inputs.USE_PREFIX == 'true' && '_linux64' || '') }}
  PROJECT_NAME_WIN32: ${{ format('{0}{1}{2}{3}{4}', inputs.USE_PREFIX == 'true' && 'gm' || '', inputs.USE_PREFIX == 'true' && inputs.REALM || '', inputs.USE_PREFIX == 'true' && '_' || '', inputs.PROJECT_NAME, inputs.USE_PREFIX == 'true' && '_win32' || '') }}
  PROJECT_NAME_WIN64: ${{ format('{0}{1}{2}{3}{4}', inputs.USE_PREFIX == 'true' && 'gm' || '', inputs.USE_PREFIX == 'true' && inputs.REALM || '', inputs.USE_PREFIX == 'true' && '_' || '', inputs.PROJECT_NAME, inputs.USE_PREFIX == 'true' && '_win64' || '') }}
  PROJECT_PATH: ${{ format('{0}{1}', inputs.PROJECT_PATH != '' && 'cd ' || '', inputs.PROJECT_PATH) }}

jobs:
  build-linux:
    runs-on: ubuntu-latest
    container: debian:bullseye
    if: (inputs.BUILD_32x == 'true') && (inputs.BUILD_LINUX == 'true')
    steps:
    - name: Install Dependencies
      run: |
        dpkg --add-architecture i386
        apt update
        apt install -y build-essential git libstdc++6:i386 gcc-multilib g++-multilib wget curl
    
    - uses: actions/checkout@v4
      name: Checkout

    - uses: actions/checkout@v4
      name: Checkout garrysmod_common
      with:
        repository: ${{inputs.GARRYSMOD_COOMON}}
        ref: ${{inputs.GARRYSMOD_COOMON_BRANCH}}
        path: '${{inputs.PROJECT_PATH}}garrysmod_common'
        
    - uses: actions/checkout@v4
      name: Checkout premake-export-compile-commands
      with:
        repository: "danielga/premake-export-compile-commands"
        ref: master
        path: '${{inputs.PROJECT_PATH}}garrysmod_common/premake/premake-export-compile-commands'
        submodules: 'recursive'

    - uses: actions/checkout@v4
      name: Checkout sourcesdk-minimal
      with:
        repository: ${{inputs.SOURCESDK_MINIMAL}}
        ref: ${{inputs.SOURCESDK_MINIMAL_BRANCH}}
        path: '${{inputs.PROJECT_PATH}}garrysmod_common/sourcesdk-minimal'
        submodules: 'recursive'
        
    - uses: actions/checkout@v4
      name: Checkout scanning
      with:
        repository: ${{inputs.SCANNING}}
        ref: ${{inputs.SCANNING_BRANCH}}
        path: '${{inputs.PROJECT_PATH}}garrysmod_common/scanning'
        submodules: 'recursive'
        
    - uses: actions/checkout@v4
      name: Checkout detouring
      with:
        repository: ${{inputs.DETOURING}}
        ref: ${{inputs.DETOURING_BRANCH}}
        path: '${{inputs.PROJECT_PATH}}garrysmod_common/detouring'
        submodules: 'recursive'
        
    - name: Install Premake
      run: |
        ${{env.PROJECT_PATH}}
        wget https://github.com/danielga/garrysmod_common/releases/download/premake-build%2F5.0.0-beta2/premake-5.0.0-beta2-linux.tar.gz -O premake.tar.gz
        tar -xvf premake.tar.gz --directory=/usr/bin
        gcc --version

    - name: Generate Project
      run: |
        ${{env.PROJECT_PATH}}
        premake5 --gmcommon=garrysmod_common gmake

    - name: Make
      run: |
        ${{env.PROJECT_PATH}}
        cd projects/linux/gmake
        make

    - name: Upload ${{env.PROJECT_NAME_LINUX32}}.${{inputs.LINUX_FILEEXTENTION}} (Pterodactyl)
      if: inputs.UPLOAD == 'pterodactyl'
      run: |
        cd projects/linux/gmake/x86/ReleaseWithSymbols/
        curl "https://${{secrets.PTERODACTYL_URL}}/api/client/servers/${{secrets.PTERODACTYL_SERVER}}/files/write?file=%2F${{inputs.PTERODACTYL_PATH}}${{env.PROJECT_NAME_LINUX32}}.${{inputs.LINUX_FILEEXTENTION}}" \
          -H 'Accept: application/json' \
          -H 'Authorization: Bearer ${{secrets.PTERODACTYL_KEY}}' \
          -X POST \
          --data-binary '@${{env.PROJECT_NAME_LINUX32}}.${{inputs.LINUX_FILEEXTENTION}}'

  test:
    needs: build-linux
    uses: Equoo/lua_thread/.github/workflows/testing.yml@main
    secrets: inherit